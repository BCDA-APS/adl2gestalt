[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "adl2gestalt"
version = "0.1.0"
description = "Convert MEDM ADL files to Gestalt YAML format for EPICS display systems"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "ADL2Gestalt Contributors"},
]
keywords = ["EPICS", "MEDM", "Gestalt", "converter", "ADL", "caQtDM", "PyDM", "CSS-Phoebus"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
]

dependencies = [
    "PyYAML>=6.0",
    "click>=8.0",
    "lxml>=4.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=23.0",
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
    "types-PyYAML>=6.0",
    "pytest-mock>=3.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
]
gui = [
    "PyQt5>=5.15.0",
    "tkinter",
]

[project.scripts]
adl2gestalt = "adl2gestalt.cli:main"
adl2gestalt-list-medm = "adl2gestalt.cli:list_medm_command"
adl2gestalt-list-gestalt = "adl2gestalt.cli:list_gestalt_command"
adl2gestalt-status = "adl2gestalt.cli:status_command"
adl2gestalt-convert = "adl2gestalt.cli:convert_command"
adl2gestalt-generate = "adl2gestalt.cli:generate_command"
adl2gestalt-test-gestalt = "adl2gestalt.cli:test_gestalt_command"
adl2gestalt-workflow = "adl2gestalt.cli:workflow_command"
gestalt = "adl2gestalt.gestalt_main:main"

[project.urls]
Homepage = "https://github.com/adl2gestalt/adl2gestalt"
Documentation = "https://adl2gestalt.readthedocs.io"
Repository = "https://github.com/adl2gestalt/adl2gestalt.git"
"Bug Tracker" = "https://github.com/adl2gestalt/adl2gestalt/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"
"gestalt" = "src/gestalt"

[tool.setuptools.package-data]
adl2gestalt = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.ruff]
line-length = 88
select = ["E", "F", "W", "I", "N", "UP", "B", "A", "C4", "SIM", "RUF"]
ignore = ["E501"]  # line length handled by black
target-version = "py38"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # assert statements are fine in tests

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_equality = true
files = ["src"]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = [
    "--cov=adl2gestalt",
    "--cov-report=term-missing",
    "--cov-report=html",
    "-v",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]